// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	specs "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/specs"
)

// ProjectService is an autogenerated mock type for the ProjectService type
type ProjectService struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: ctx, projDetail, id
func (_m *ProjectService) CreateProject(ctx context.Context, projDetail specs.CreateProjectRequest, id int) (int, error) {
	ret := _m.Called(ctx, projDetail, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProjectRequest, int) (int, error)); ok {
		return rf(ctx, projDetail, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProjectRequest, int) int); ok {
		r0 = rf(ctx, projDetail, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateProjectRequest, int) error); ok {
		r1 = rf(ctx, projDetail, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, profileID
func (_m *ProjectService) GetProject(ctx context.Context, profileID int) ([]specs.ProjectResponse, error) {
	ret := _m.Called(ctx, profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 []specs.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]specs.ProjectResponse, error)); ok {
		return rf(ctx, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []specs.ProjectResponse); ok {
		r0 = rf(ctx, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *ProjectService) UpdateProject(ctx context.Context, profileID string, eduID string, req specs.UpdateProjectRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateProjectRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateProjectRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateProjectRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectService creates a new instance of ProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectService {
	mock := &ProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
