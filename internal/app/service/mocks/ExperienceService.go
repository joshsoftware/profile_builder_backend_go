// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	specs "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/specs"
)

// ExperienceService is an autogenerated mock type for the ExperienceService type
type ExperienceService struct {
	mock.Mock
}

// CreateExperience provides a mock function with given fields: ctx, expDetail, profileID, userID
func (_m *ExperienceService) CreateExperience(ctx context.Context, expDetail specs.CreateExperienceRequest, profileID int, userID int) (int, error) {
	ret := _m.Called(ctx, expDetail, profileID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperience")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateExperienceRequest, int, int) (int, error)); ok {
		return rf(ctx, expDetail, profileID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateExperienceRequest, int, int) int); ok {
		r0 = rf(ctx, expDetail, profileID, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateExperienceRequest, int, int) error); ok {
		r1 = rf(ctx, expDetail, profileID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExperience provides a mock function with given fields: ctx, profileID, experienceID
func (_m *ExperienceService) DeleteExperience(ctx context.Context, profileID int, experienceID int) error {
	ret := _m.Called(ctx, profileID, experienceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExperience")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, profileID, experienceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListExperiences provides a mock function with given fields: ctx, id, filter
func (_m *ExperienceService) ListExperiences(ctx context.Context, id int, filter specs.ListExperiencesFilter) ([]specs.ExperienceResponse, error) {
	ret := _m.Called(ctx, id, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListExperiences")
	}

	var r0 []specs.ExperienceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, specs.ListExperiencesFilter) ([]specs.ExperienceResponse, error)); ok {
		return rf(ctx, id, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, specs.ListExperiencesFilter) []specs.ExperienceResponse); ok {
		r0 = rf(ctx, id, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ExperienceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, specs.ListExperiencesFilter) error); ok {
		r1 = rf(ctx, id, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperience provides a mock function with given fields: ctx, profileID, expID, userID, req
func (_m *ExperienceService) UpdateExperience(ctx context.Context, profileID int, expID int, userID int, req specs.UpdateExperienceRequest) (int, error) {
	ret := _m.Called(ctx, profileID, expID, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExperience")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, specs.UpdateExperienceRequest) (int, error)); ok {
		return rf(ctx, profileID, expID, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, specs.UpdateExperienceRequest) int); ok {
		r0 = rf(ctx, profileID, expID, userID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, specs.UpdateExperienceRequest) error); ok {
		r1 = rf(ctx, profileID, expID, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExperienceService creates a new instance of ExperienceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExperienceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExperienceService {
	mock := &ExperienceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
