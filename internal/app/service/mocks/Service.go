// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	specs "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/specs"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateAchievement provides a mock function with given fields: ctx, cDetail, ID
func (_m *Service) CreateAchievement(ctx context.Context, cDetail specs.CreateAchievementRequest, ID int) (int, error) {
	ret := _m.Called(ctx, cDetail, ID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAchievement")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateAchievementRequest, int) (int, error)); ok {
		return rf(ctx, cDetail, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateAchievementRequest, int) int); ok {
		r0 = rf(ctx, cDetail, ID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateAchievementRequest, int) error); ok {
		r1 = rf(ctx, cDetail, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCertificate provides a mock function with given fields: ctx, cDetail, ID
func (_m *Service) CreateCertificate(ctx context.Context, cDetail specs.CreateCertificateRequest, ID int) (int, error) {
	ret := _m.Called(ctx, cDetail, ID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateCertificateRequest, int) (int, error)); ok {
		return rf(ctx, cDetail, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateCertificateRequest, int) int); ok {
		r0 = rf(ctx, cDetail, ID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateCertificateRequest, int) error); ok {
		r1 = rf(ctx, cDetail, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEducation provides a mock function with given fields: ctx, eduDetail, ID
func (_m *Service) CreateEducation(ctx context.Context, eduDetail specs.CreateEducationRequest, ID int) (int, error) {
	ret := _m.Called(ctx, eduDetail, ID)

	if len(ret) == 0 {
		panic("no return value specified for CreateEducation")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateEducationRequest, int) (int, error)); ok {
		return rf(ctx, eduDetail, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateEducationRequest, int) int); ok {
		r0 = rf(ctx, eduDetail, ID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateEducationRequest, int) error); ok {
		r1 = rf(ctx, eduDetail, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExperience provides a mock function with given fields: ctx, expDetail, id
func (_m *Service) CreateExperience(ctx context.Context, expDetail specs.CreateExperienceRequest, id int) (int, error) {
	ret := _m.Called(ctx, expDetail, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperience")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateExperienceRequest, int) (int, error)); ok {
		return rf(ctx, expDetail, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateExperienceRequest, int) int); ok {
		r0 = rf(ctx, expDetail, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateExperienceRequest, int) error); ok {
		r1 = rf(ctx, expDetail, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, profileDetail
func (_m *Service) CreateProfile(ctx context.Context, profileDetail specs.CreateProfileRequest) (int, error) {
	ret := _m.Called(ctx, profileDetail)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProfileRequest) (int, error)); ok {
		return rf(ctx, profileDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProfileRequest) int); ok {
		r0 = rf(ctx, profileDetail)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateProfileRequest) error); ok {
		r1 = rf(ctx, profileDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, projDetail, id
func (_m *Service) CreateProject(ctx context.Context, projDetail specs.CreateProjectRequest, id int) (int, error) {
	ret := _m.Called(ctx, projDetail, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProjectRequest, int) (int, error)); ok {
		return rf(ctx, projDetail, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.CreateProjectRequest, int) int); ok {
		r0 = rf(ctx, projDetail, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.CreateProjectRequest, int) error); ok {
		r1 = rf(ctx, projDetail, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEducation provides a mock function with given fields: ctx, profileID
func (_m *Service) GetEducation(ctx context.Context, profileID int) ([]specs.EducationResponse, error) {
	ret := _m.Called(ctx, profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetEducation")
	}

	var r0 []specs.EducationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]specs.EducationResponse, error)); ok {
		return rf(ctx, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []specs.EducationResponse); ok {
		r0 = rf(ctx, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.EducationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperience provides a mock function with given fields: ctx, id
func (_m *Service) GetExperience(ctx context.Context, id int) ([]specs.ExperienceResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetExperience")
	}

	var r0 []specs.ExperienceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]specs.ExperienceResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []specs.ExperienceResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ExperienceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, id
func (_m *Service) GetProfile(ctx context.Context, id int) (specs.ResponseProfile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 specs.ResponseProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (specs.ResponseProfile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) specs.ResponseProfile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(specs.ResponseProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, profileID
func (_m *Service) GetProject(ctx context.Context, profileID int) ([]specs.ProjectResponse, error) {
	ret := _m.Called(ctx, profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 []specs.ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]specs.ProjectResponse, error)); ok {
		return rf(ctx, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []specs.ProjectResponse); ok {
		r0 = rf(ctx, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx
func (_m *Service) ListProfiles(ctx context.Context) ([]specs.ResponseListProfiles, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 []specs.ResponseListProfiles
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]specs.ResponseListProfiles, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []specs.ResponseListProfiles); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ResponseListProfiles)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkills provides a mock function with given fields: ctx
func (_m *Service) ListSkills(ctx context.Context) (specs.ListSkills, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSkills")
	}

	var r0 specs.ListSkills
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (specs.ListSkills, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) specs.ListSkills); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(specs.ListSkills)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAchievement provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *Service) UpdateAchievement(ctx context.Context, profileID string, eduID string, req specs.UpdateAchievementRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAchievement")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateAchievementRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateAchievementRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateAchievementRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificate provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *Service) UpdateCertificate(ctx context.Context, profileID string, eduID string, req specs.UpdateCertificateRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateCertificateRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateCertificateRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateCertificateRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEducation provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *Service) UpdateEducation(ctx context.Context, profileID string, eduID string, req specs.UpdateEducationRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEducation")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateEducationRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateEducationRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateEducationRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperience provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *Service) UpdateExperience(ctx context.Context, profileID string, eduID string, req specs.UpdateExperienceRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExperience")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateExperienceRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateExperienceRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateExperienceRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, id, profileDetail
func (_m *Service) UpdateProfile(ctx context.Context, id int, profileDetail specs.UpdateProfileRequest) (int, error) {
	ret := _m.Called(ctx, id, profileDetail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, specs.UpdateProfileRequest) (int, error)); ok {
		return rf(ctx, id, profileDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, specs.UpdateProfileRequest) int); ok {
		r0 = rf(ctx, id, profileDetail)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, specs.UpdateProfileRequest) error); ok {
		r1 = rf(ctx, id, profileDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, profileID, eduID, req
func (_m *Service) UpdateProject(ctx context.Context, profileID string, eduID string, req specs.UpdateProjectRequest) (int, error) {
	ret := _m.Called(ctx, profileID, eduID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateProjectRequest) (int, error)); ok {
		return rf(ctx, profileID, eduID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, specs.UpdateProjectRequest) int); ok {
		r0 = rf(ctx, profileID, eduID, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, specs.UpdateProjectRequest) error); ok {
		r1 = rf(ctx, profileID, eduID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
