// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/joshsoftware/profile_builder_backend_go/internal/repository"

	specs "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/specs"
)

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, name, email, role, tx
func (_m *UserStorer) CreateUser(ctx context.Context, name string, email string, role string, tx pgx.Tx) error {
	ret := _m.Called(ctx, name, email, role, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, pgx.Tx) error); ok {
		r0 = rf(ctx, name, email, role, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: ctx, filter
func (_m *UserStorer) GetUserInfo(ctx context.Context, filter specs.UserInfoFilter) (repository.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, specs.UserInfoFilter) (repository.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, specs.UserInfoFilter) repository.User); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, specs.UserInfoFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: ctx, email, tx
func (_m *UserStorer) RemoveUser(ctx context.Context, email string, tx pgx.Tx) error {
	ret := _m.Called(ctx, email, tx)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pgx.Tx) error); ok {
		r0 = rf(ctx, email, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserStorer creates a new instance of UserStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
