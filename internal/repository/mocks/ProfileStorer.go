// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	context "context"

	specs "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/specs"
	repository "github.com/joshsoftware/profile_builder_backend_go/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// ProfileStorer is an autogenerated mock type for the ProfileStorer type
type ProfileStorer struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: ctx, pd
func (_m *ProfileStorer) CreateProfile(ctx context.Context, pd repository.ProfileRepo) (int, error) {
	ret := _m.Called(ctx, pd)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ProfileRepo) (int, error)); ok {
		return rf(ctx, pd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ProfileRepo) int); ok {
		r0 = rf(ctx, pd)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ProfileRepo) error); ok {
		r1 = rf(ctx, pd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, profileID
func (_m *ProfileStorer) GetProfile(ctx context.Context, profileID int) (specs.ResponseProfile, error) {
	ret := _m.Called(ctx, profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 specs.ResponseProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (specs.ResponseProfile, error)); ok {
		return rf(ctx, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) specs.ResponseProfile); ok {
		r0 = rf(ctx, profileID)
	} else {
		r0 = ret.Get(0).(specs.ResponseProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx
func (_m *ProfileStorer) ListProfiles(ctx context.Context) ([]specs.ListProfiles, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 []specs.ListProfiles
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]specs.ListProfiles, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []specs.ListProfiles); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specs.ListProfiles)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkills provides a mock function with given fields: ctx
func (_m *ProfileStorer) ListSkills(ctx context.Context) (specs.ListSkills, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListSkills")
	}

	var r0 specs.ListSkills
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (specs.ListSkills, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) specs.ListSkills); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(specs.ListSkills)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, profileID, pd
func (_m *ProfileStorer) UpdateProfile(ctx context.Context, profileID int, pd repository.UpdateProfileRepo) (int, error) {
	ret := _m.Called(ctx, profileID, pd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, repository.UpdateProfileRepo) (int, error)); ok {
		return rf(ctx, profileID, pd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, repository.UpdateProfileRepo) int); ok {
		r0 = rf(ctx, profileID, pd)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, repository.UpdateProfileRepo) error); ok {
		r1 = rf(ctx, profileID, pd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProfileStorer creates a new instance of ProfileStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileStorer {
	mock := &ProfileStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
