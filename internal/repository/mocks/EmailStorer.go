// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/joshsoftware/profile_builder_backend_go/internal/repository"
)

// EmailStorer is an autogenerated mock type for the EmailStorer type
type EmailStorer struct {
	mock.Mock
}

// CreateSendInvitation provides a mock function with given fields: ctx, sendRequest, tx
func (_m *EmailStorer) CreateSendInvitation(ctx context.Context, sendRequest repository.EmailRepo, tx pgx.Tx) error {
	ret := _m.Called(ctx, sendRequest, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateSendInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.EmailRepo, pgx.Tx) error); ok {
		r0 = rf(ctx, sendRequest, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCreatedByIdByProfileID provides a mock function with given fields: ctx, sendRequest, tx
func (_m *EmailStorer) GetCreatedByIdByProfileID(ctx context.Context, sendRequest repository.SendUserInvitationRequest, tx pgx.Tx) (int, error) {
	ret := _m.Called(ctx, sendRequest, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatedByIdByProfileID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) (int, error)); ok {
		return rf(ctx, sendRequest, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) int); ok {
		r0 = rf(ctx, sendRequest, tx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) error); ok {
		r1 = rf(ctx, sendRequest, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailByProfileID provides a mock function with given fields: ctx, sendRequest, tx
func (_m *EmailStorer) GetEmailByProfileID(ctx context.Context, sendRequest repository.SendUserInvitationRequest, tx pgx.Tx) (string, error) {
	ret := _m.Called(ctx, sendRequest, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailByProfileID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) (string, error)); ok {
		return rf(ctx, sendRequest, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) string); ok {
		r0 = rf(ctx, sendRequest, tx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.SendUserInvitationRequest, pgx.Tx) error); ok {
		r1 = rf(ctx, sendRequest, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEmailByUserID provides a mock function with given fields: ctx, userID, tx
func (_m *EmailStorer) GetUserEmailByUserID(ctx context.Context, userID int, tx pgx.Tx) (string, error) {
	ret := _m.Called(ctx, userID, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEmailByUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, pgx.Tx) (string, error)); ok {
		return rf(ctx, userID, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, pgx.Tx) string); ok {
		r0 = rf(ctx, userID, tx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, pgx.Tx) error); ok {
		r1 = rf(ctx, userID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfileCompleteStatus provides a mock function with given fields: ctx, updateReq, tx
func (_m *EmailStorer) UpdateProfileCompleteStatus(ctx context.Context, updateReq repository.UpadateRequest, tx pgx.Tx) error {
	ret := _m.Called(ctx, updateReq, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileCompleteStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UpadateRequest, pgx.Tx) error); ok {
		r0 = rf(ctx, updateReq, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailStorer creates a new instance of EmailStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailStorer {
	mock := &EmailStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
