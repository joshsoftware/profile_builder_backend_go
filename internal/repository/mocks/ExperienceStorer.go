// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/profile_builder_backend_go/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/joshsoftware/profile_builder_backend_go/internal/repository"
)

// ExperienceStorer is an autogenerated mock type for the ExperienceStorer type
type ExperienceStorer struct {
	mock.Mock
}

// CreateExperience provides a mock function with given fields: ctx, values
func (_m *ExperienceStorer) CreateExperience(ctx context.Context, values []repository.ExperienceDao) error {
	ret := _m.Called(ctx, values)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperience")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []repository.ExperienceDao) error); ok {
		r0 = rf(ctx, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExperiences provides a mock function with given fields: ctx, profileID
func (_m *ExperienceStorer) GetExperiences(ctx context.Context, profileID int) ([]dto.ExperienceResponse, error) {
	ret := _m.Called(ctx, profileID)

	if len(ret) == 0 {
		panic("no return value specified for GetExperiences")
	}

	var r0 []dto.ExperienceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]dto.ExperienceResponse, error)); ok {
		return rf(ctx, profileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []dto.ExperienceResponse); ok {
		r0 = rf(ctx, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ExperienceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExperienceStorer creates a new instance of ExperienceStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExperienceStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExperienceStorer {
	mock := &ExperienceStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
